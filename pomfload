#!/bin/sh
# Requires jq (https://stedolan.github.io/jq): sudo pacman -S jq
if [ "$#" -lt 1 ]; then
    echo "Usage: $(basename -- "$0") [--upload upload-url] [--download download-url-prefix] FILE [FILE...]" >&2
    exit 1
fi

upload_url=https://pomf.se/upload.php
download_url=https://a.pomf.se/

eval "set -- $(getopt -n "$0" -o u:d: -l upload:,download: -- "$@")"
while [ "$#" != 0 ]; do
    case $1 in
        --download|-d) download_url=$2; shift;;
        --upload|-u) upload_url=$2; shift;;
        --) break;;
    esac; shift
done; shift

newline='
'

result=0
for f do
    if ! pomf_reply="$(curl -sS --progress-bar -F "files[]=@$f" -- "$upload_url")"; then
        echo "Failed to upload $f" >&2
        result=1
    else
        if ! pomf_reply_parsed=$(printf %s\\n "$pomf_reply" | jq -r '.success, .error, .files[0].url'); then
            echo "Failed to parse uploader response to $f" >&2
            printf "Response:\n%s\n" "$pomf_reply" >&2
            result=1
            continue
        fi

        pomf_success=${pomf_reply_parsed%%"$newline"*}; pomf_reply_parsed=${pomf_reply_parsed#*"$newline"}
        pomf_error_message=${pomf_reply_parsed%%"$newline"*}; pomf_reply_parsed=${pomf_reply_parsed#*"$newline"}
        pomf_id=$pomf_reply_parsed

        if [ "$pomf_success" != true ]; then
            echo "Failed to upload $f" >&2
            echo "Server error: $pomf_error_message" >&2
            result=1
            continue
        fi

        [ "$#" -gt 1 ] && printf "%s: " "$f"

        url=$download_url$pomf_id
        echo "$url"
        printf '%s\t%s\t%s\n' "$(date --rfc-3339=seconds)" "$url" "$f" >> ~/.pomf_history
    fi
done
exit "$result"
